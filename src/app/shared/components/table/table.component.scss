
@use 'config' as *;
@use 'mixins/overflow-gradient';
@use 'mixins/screen';
@use 'mixins/sr-only';

giz-table {
    display: block;
}

.table {
    $self: &;

    @include overflow-gradient.apply;

    --overflow-gradient-width: 60px;

    position: relative;
    width: 100%;

    &.is-overflowing {
        margin-right: -$p-gutter;
    }

    &__container {
        overflow-x: auto;
        scroll-behavior: smooth;
        width: 100%;

        table {
            min-width: 100%;
            table-layout: fixed;
            width: auto;
        }
    }

    &__caption {
        &--hide {
            @include sr-only.apply;
        }
    }

    /* stylelint-disable no-descending-specificity  */

    thead {
        tr + tr {
            th {
                padding-top: 0;
            }
        }
    }

    &--compact {
        --table-cell-padding: 4px #{ $p-gutter };

        td, th {
            height: 32px;
            white-space: nowrap;
        }
    }

    &--report {
        --table-cell-padding: #{ $p-gutter--xsmall } #{ $p-gutter };

        td, th {
            height: 48px;
            white-space: nowrap;

            &:not(:first-child) {
                width: 300px;
            }
        }

        td {
            font-family: $font-open-sans;
        }

        thead {
            th {
                --table-head-cell-padding: 4px #{ $p-gutter };

                height: 32px;
                white-space: nowrap;
            }
        }
    }

    &--info {
        --table-cell-padding: 0.5rem #{ $p-gutter--small };

        line-height: 1.4;

        #{ $self }__caption {
            font-size: 1rem;

            &--small {
                font-size: var(--text-font-size);
            }
        }

        td, th {
            word-break: keep-all;
        }

        tbody {
            th {
                vertical-align: top;
            }

            td {
                text-align: right;
            }
        }
    }

    &--overview {
        td {
            font-family: $font-barlow;
            font-weight: $weight-medium;
            height: 46px;
            white-space: nowrap;
        }
    }

    &--no-border {
        table {
            border: 0;
            margin-bottom: 0;
        }

        tr {
            &:first-child {
                th, td {
                    padding-top: 0;
                }
            }

            &:last-child {
                th, td {
                    padding-bottom: 0;
                }
            }
        }

        th, td {
            &:first-child {
                padding-left: 0;
            }

            &:last-child {
                padding-right: 0;
            }
        }
    }

    &.is-loading {
        tbody {
            animation: table-pulse 1s infinite forwards;
        }
    }
    /* stylelint-enable no-descending-specificity  */

    @include screen.min($screen-minimal) {
        &--sticky {
            table {
                border-left: 0;
                overflow: auto;
            }

            th, td {
                &:first-child {
                    background: var(--table-bcg);
                    border-left: 1px solid var(--table-border-color);
                    border-right: 1px solid var(--table-border-color);
                    left: 0;
                    position: sticky;
                    top: 0;
                    z-index: 1;
                }
            }

            &.is-overflow-left {
                &::before {
                    display: none;
                }
            }
        }
    }

    @include screen.min($screen-simple) {
        &--info {
            --table-cell-padding: 0.5rem #{ $p-gutter };
        }
    }
}

@keyframes table-pulse {
    0% {
        opacity: 0.2;
    }

    50% {
        opacity: 0.5;
    }

    100% {
        opacity: 0.2;
    }
}
